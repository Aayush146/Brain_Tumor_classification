# -*- coding: utf-8 -*-
"""AMLS_image_checks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lW8cBL3d25u6UrxfKJQd9NDKg7WCioKY
"""

!pip install pydicom

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt 
import os 
import pydicom as dicom 
from google.colab.patches import cv2_imshow
import pandas as pd
from zipfile import ZipFile

''' BraTS 2021 focuses on the evaluation of state-of-the-art methods for the
accurate segmentation of intrinsically heterogeneous brain glioma sub-regions
and on the evaluation of classification methods distinguishing between MGMT
methylated (MGMT+) and unmethylated (MGMT-) tumors'''

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/MyDrive/AMLS_2/Assignment/Dataset'
!unzip 'rsna-miccai-brain-tumor-radiogenomic-classification.zip'

string = '/content/drive/MyDrive/AMLS_2/Assignment/Dataset/train/00000/FLAIR/Image-104.dcm'
result = string.strip('/')
print(result)

modality = ['FLAIR', 'T1w', 'T1wCE', 'T2w']
fig = plt.figure(figsize = (10,8))
plt.axis('off')
image_paths = ['/content/drive/MyDrive/AMLS_2/Assignment/Dataset/train/00002/FLAIR/Image-441.dcm',
               '/content/drive/MyDrive/AMLS_2/Assignment/Dataset/train/00002/T1w/Image-15.dcm', 
               '/content/drive/MyDrive/AMLS_2/Assignment/Dataset/train/00002/T1wCE/Image-69.dcm',
               '/content/drive/MyDrive/AMLS_2/Assignment/Dataset/train/00002/T2w/Image-118.dcm']

for counter, (image, mods)in enumerate(zip(image_paths, modality)):
  image = dicom.dcmread(image).pixel_array
  ax1 = fig.add_subplot(2,2,counter + 1)
  ax1.title.set_text('{}'.format(mods))
  ax1.axis('off')
  plt.imshow(image, cmap = 'gray')

for counter, (image, mods)in enumerate(zip(image_paths, modality)):
  image = dicom.dcmread(image).pixel_array
  plt.figure(figsize=(20,8))
  plt.title('{}'.format(mods))
  ax1.axis('off')
  plt.imshow(image, cmap = 'gray')

# check number of patients in total
path = '/content/drive/MyDrive/AMLS_2/Assignment/Dataset/train'
file_path = '/content/drive/MyDrive/AMLS_2/Assignment/Dataset/train_labels.csv'
pa_list = []
patient_list = os.listdir(path)
for i in patient_list:
  if i.endswith('0'):
    pa_list.append(0)
  else:
    string_list = [int(j) for j in i if int(j) != 0] # we can loop over string as well
    num_pa = int(''.join(map(str, string_list)))
    pa_list.append(num_pa)

file  = pd.read_csv(file_path)
labels = file.iloc[:,0]
labels = labels.to_list()

similar = [element for element in pa_list if element in labels]
  


print(len(similar))
print(len(labels))

# check the number of methylated to non methylated patients 

file = pd.read_csv('/content/drive/MyDrive/AMLS_2/Assignment/Dataset/train_labels.csv')
non = file[file['MGMT_value'] == 0]
meth = file[file['MGMT_value'] == 1]

print(len(non))
print(len(meth))

# get rid of all black images in each persons image 

def remove_blanks(file_path):
  #loping over each modality 
  images = os.listdir(file_path)
  for counter, b in enumerate(images):
    status = True
    image_path = os.path.join(file_path, b)
    image = dicom.dcmread(image_path).pixel_array
    if np.sum(image) == 0:
      print('Removing image number {}'.format(b))
      os.remove(image_path)
      status = False
      return status
    else:
      continue

base_path = '/content/drive/MyDrive/AMLS_2/Assignment/Dataset'
sets = ['train', 'test']

for i in sets:
  path_1 = os.path.join(base_path, i)
  list_1 = os.listdir(path_1)
  for j in list_1:
    patient_path = os.path.join(path_1, j)
    list_2 = os.listdir(patient_path)
    for mod in list_2:
      mod_path = os.path.join(patient_path, mod)
      f = remove_blanks(mod_path)
      if not f:
        print('image from {} for patient {} from {} has been removed'.format(mod, j,i))

"""## Multi modal image combination"""

# try out image vetical stacking 

def image_stacker(file_paths):
  stack = None 
  for counter, i in enumerate(file_paths):
    if counter == 0:
      image = dicom.dcmread(i).pixel_array
      stack = image
    else:
      image = dicom.dcmread(i).pixel_array
      stack = cv.merge([stack, image])

  return stack

file_paths = ['/content/drive/MyDrive/AMLS_2/Assignment/Dataset/train/00000/FLAIR/Image-100.dcm',
              '/content/drive/MyDrive/AMLS_2/Assignment/Dataset/train/00000/T2w/Image-100.dcm']

df = image_stacker(file_paths)

plt.figure( figsize = (20,8))
plt.imshow(df[:,:,0], cmap = 'gray')
plt.imshow(df[:,:,1], cmap = 'viridis', vmin = 0, vmax = 255, alpha = 0.5)
plt.axis('off')
plt.title(' Merged Image', fontsize = 20)
plt.show()

"""## Texture analysis """